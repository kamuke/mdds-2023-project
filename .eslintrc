{
	"root": true,
	"extends": ["xo", "xo-typescript", "prettier"],
	"rules": {
		"new-cap": 0,
		"valid-jsdoc": 0,
		"@typescript-eslint/camelcase": 0,
		"@typescript-eslint/restrict-template-expressions": 0,
		"@typescript-eslint/restrict-plus-operands": 0,
		"@typescript-eslint/prefer-readonly-parameter-types": 0, // TODO: turn this back on
		"@typescript-eslint/no-unsafe-member-access": 0, // TODO: figure out why this thinks that non-any types are any
		"@typescript-eslint/no-unsafe-call": 0, // TODO: figure out why this thinks that non-any types are any
		"@typescript-eslint/no-unsafe-return": 0, // TODO: figure out why this thinks that non-any types are any
		"@typescript-eslint/no-unsafe-assignment": 0, // TODO: figure out why this thinks that non-any types are any
		"@typescript-eslint/no-redundant-type-constituents": 0, // TODO: figure out why this thinks that non-any types are any
		"@typescript-eslint/no-var-requires": 0, // we have legitimate use cases for this
		"@typescript-eslint/no-require-imports": 0, // we have legitimate use cases for this
		"@typescript-eslint/consistent-type-definitions": 0, // there are legitimate use cases for using "interface" instead of "type"
		"@typescript-eslint/naming-convention": 0, // we have legitimate use cases for this and we know what we're doing
		"no-undef": 0, // https://typescript-eslint.io/docs/linting/troubleshooting/#i-get-errors-from-the-no-undef-rule-about-global-variables-not-being-defined-even-though-there-are-no-typescript-errors
		"capitalized-comments": 0 // pedantic
	}
}
